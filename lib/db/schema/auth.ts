/*
 * This file defines TypeScript schema definitions for database tables using drizzle-orm.
 *
 * Exports:
 * - User: Schema for user accounts storing core user data like name, email, etc.
 * - Session: Schema for auth sessions with tokens, expiry and user references
 * - Account: Schema for federated auth accounts (OAuth providers etc) linked to users. In this app, Keycloak is used as the OAuth provider.
 * - Verification: Schema for verification tokens/codes (e.g. email verification)
 *
 * Description:
 * The schemas use PostgreSQL table definitions with properly typed columns and relationships.
 * Each table has standard fields like id, timestamps, and foriegn key references where needed.
 * Table names are prefixed with "_" to avoid conflicts with reserved words.
 *
 * DO NOT MODIFY THIS FILE. It is automatically generated by the better-auth library, and should be used as-is.
 */

import {
  pgTable,
  text,
  timestamp,
  boolean,
  numeric,
} from "drizzle-orm/pg-core";

export const User = pgTable("_user", {
  id: text("id").primaryKey(),
  name: text("name").notNull(),
  email: text("email").notNull().unique(),
  emailVerified: boolean("email_verified").notNull(),
  image: text("image"),
  createdAt: timestamp("created_at").notNull(),
  updatedAt: timestamp("updated_at").notNull(),
});

export const Session = pgTable("_session", {
  id: text("id").primaryKey(),
  expiresAt: timestamp("expires_at").notNull(),
  token: text("token").notNull().unique(),
  createdAt: timestamp("created_at").notNull(),
  updatedAt: timestamp("updated_at").notNull(),
  ipAddress: text("ip_address"),
  userAgent: text("user_agent"),
  userId: text("user_id")
    .notNull()
    .references(() => User.id),
});

export const Account = pgTable("_account", {
  id: text("id").primaryKey(),
  accountId: text("account_id").notNull(),
  providerId: text("provider_id").notNull(),
  userId: text("user_id")
    .notNull()
    .references(() => User.id),
  accessToken: text("access_token"),
  refreshToken: text("refresh_token"),
  idToken: text("id_token"),
  accessTokenExpiresAt: timestamp("access_token_expires_at"),
  refreshTokenExpiresAt: timestamp("refresh_token_expires_at"),
  scope: text("scope"),
  password: text("password"),
  createdAt: timestamp("created_at").notNull(),
  updatedAt: timestamp("updated_at").notNull(),
});

export const Verification = pgTable("_verification", {
  id: text("id").primaryKey(),
  identifier: text("identifier").notNull(),
  value: text("value").notNull(),
  expiresAt: timestamp("expires_at").notNull(),
  createdAt: timestamp("created_at"),
  updatedAt: timestamp("updated_at"),
});
